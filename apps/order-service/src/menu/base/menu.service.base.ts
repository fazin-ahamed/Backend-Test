/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Menu as PrismaMenu, Dish as PrismaDish } from "@prisma/client";

export class MenuServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.MenuCountArgs, "select">): Promise<number> {
    return this.prisma.menu.count(args);
  }

  async menus(args: Prisma.MenuFindManyArgs): Promise<PrismaMenu[]> {
    return this.prisma.menu.findMany(args);
  }
  async menu(args: Prisma.MenuFindUniqueArgs): Promise<PrismaMenu | null> {
    return this.prisma.menu.findUnique(args);
  }
  async createMenu(args: Prisma.MenuCreateArgs): Promise<PrismaMenu> {
    return this.prisma.menu.create(args);
  }
  async updateMenu(args: Prisma.MenuUpdateArgs): Promise<PrismaMenu> {
    return this.prisma.menu.update(args);
  }
  async deleteMenu(args: Prisma.MenuDeleteArgs): Promise<PrismaMenu> {
    return this.prisma.menu.delete(args);
  }

  async findDishes(
    parentId: string,
    args: Prisma.DishFindManyArgs
  ): Promise<PrismaDish[]> {
    return this.prisma.menu
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .dishes(args);
  }
}

/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Dish as PrismaDish, Menu as PrismaMenu } from "@prisma/client";

export class DishServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.DishCountArgs, "select">): Promise<number> {
    return this.prisma.dish.count(args);
  }

  async dishes(args: Prisma.DishFindManyArgs): Promise<PrismaDish[]> {
    return this.prisma.dish.findMany(args);
  }
  async dish(args: Prisma.DishFindUniqueArgs): Promise<PrismaDish | null> {
    return this.prisma.dish.findUnique(args);
  }
  async createDish(args: Prisma.DishCreateArgs): Promise<PrismaDish> {
    return this.prisma.dish.create(args);
  }
  async updateDish(args: Prisma.DishUpdateArgs): Promise<PrismaDish> {
    return this.prisma.dish.update(args);
  }
  async deleteDish(args: Prisma.DishDeleteArgs): Promise<PrismaDish> {
    return this.prisma.dish.delete(args);
  }

  async getMenu(parentId: string): Promise<PrismaMenu | null> {
    return this.prisma.dish
      .findUnique({
        where: { id: parentId },
      })
      .menu();
  }
}
